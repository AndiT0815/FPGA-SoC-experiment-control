// on Linux
// compile with: [] = optional
//   g++ FPGA-server.cpp simple-server.cpp [FPGA-test-client.cpp] -o FPGA-server -pthread
// run with:
//   ./FPGA-server

// on Petalinux
// source Petalinux:
//   source /opt/pkg/petalinux/settings.sh
// create project:
//   cd into folder with bsp
//   petalinux-create -t project -s Petalinux-Arty-Z7-20-2017.4-1.bsp
// configure project:
//   petalinux-config
//   petalinux-config -c kernel
//   petalinux-config -c u-boot
//   petalinus-config -c rootfs
// create new application:
//   petalinux-create -t apps [--template c++] -n FPGA-server [--enable]	// use '-' instead of '_'!
//   petalinux-config -c rootfs		-> enable app if not --enable
// create new module:
//   petalinux-create -t modules -n dio-24 [--enable]				// use lowercase only!
//   petalinux-config -c rootfs		-> enable module if not --enable
//   petalinux-config -c kernel	& exit	-> this might be needed for 1st module?
// compile entire project: 
//   petalinux-build
// create BOOT.bIN to boot from SD:
//   petalinux-package --boot --force --fsbl images/linux/zynq_fsbl.elf --fpga images/linux/design_1_wrapper.bit --u-boot
//   copy image.ub and BOOT.BIN on SD card and boot board with jumper set for SD card
// compile app and re-package existing image.ub
//   petalinux-build -c FPGA-server
//   petalinux-build -x package
// change device tree / hardware has changed
//   in Vivado (Windows) export to hardware, include bitstream and copy into project folder
//   petalinux-build -x distclean		// sometimes this was needed to solve building errors
//   petalinux-config --get-hw-description=./
//   petalinux-build


DMA TX/RX works like this:	updated on 26/5/2020 by Andi (TODO: cyclic mode is in work)

write:				TODO: at the moment only called before start and not tested in streaming mode (i.e. while running)
				calls prepare_TX_buffers to copy user data into TX buffer. mem_TX.first = mem_TX.next = first buffer, mem_TX.last = last buffer
				calls prepare_RX_buffers to create NUM_RX_DSC RX buffers. mem_RX.first = mem_RX.next = first buffer, mem_RX.last = last buffer (not further used).

read:				
				if RX buffers available calls Copy_RX, otherwise wait for data if running or return 0 data
	Copy_RX: 		if user buffer != NULL: copies mem_RX.first to mem_RX.next (exclusive) buffers to user buffer, stops if user buffer is full.
				                        only entire RX buffers are copied to avoid partial copies for efficiency.
				sets mem_RX.first to first not read buffer. 
				mem_RX.last is not used or changed.

start_TX/RX:
	prepare_TX/RX_dsc	creates NUM_DSC_TX/RX dsc's and sets dsc_TX/RX.head to first of them.
				if in cyclic mode prepares NUM_DSC_TX/RX dsc's and sets dsc_TX/RX.last_prep to last of them.
				if not in cyclic mode prepares NUM_DSC_TX/RX / 2 dsc's and sets dsc_TX/RX.last_prep to last of them.
				dsc_TX/RX.tail = NULL (indicating not running dsc's)
	start_TX/RX_SG		starts prepared dsc's from dsc_TX/RX.head .. dsc_TX/RX.last_prep
				sets dsc_TX/RX.tail = dsc_TX/RX.last_prep
				and dsc_TX/RX.last_prep = NULL
	prepare_TX/RX_dsc	for RX not anymore called!
				prepares another NUM_DSC_TX/RX / 2 dsc's (half of dsc's running and half prepared in not-cyclic mode, otherwise all running)
				and sets dsc_TX/RX.last_prep to last prepared dsc

on IRQ:
	verify_TX/RX		for each completed RX buffer sets mem->bytes to received bytes
				if not in cyclic mode releases each completed TX/RX buffer from dsc
				if in cyclic mode resets dsc->status = 0 and advances mem_TX/RX.next and if all buffers full also mem_TX/RX.first (i.e. drops oldest buffers)
				counts and updates total bytes and samples in status
				and sets dsc_TX/RX.head to first not completed dsc
	if not all samples transmitted and not in cyclic mode:
	start_TX/RX_SG		starts prepared dsc's from dsc_TX/RX.tail->next .. dsc_TX/RX.last_prep
				sets dsc_TX/RX.tail = dsc_TX/RX.last_prep
				and dsc_TX/RX.last_prep = NULL
	prepare_TX/RX_dsc	prepares max. NUM_DSC_TX/RX / 2 dsc's, i.e. associates TX/RX buffer with dsc starting at mem_TX/RX.next
				and sets dsc_TX/RX.last_prep to last prepared dsc
				for prepare_RX_dsc if all RX buffers are with data calls Copy_RX(NULL,MAX_BUF_SIZE) to drop oldest not read data
				sets mem_TX/RX.next to first not prepared TX/RX buffer
	if all samples transmitted: TODO: or IOCTL_STOP called from user
	stop_TX/RX		stops DMA, calls reset_TX/RX on error if reset_on_error = true
				calls verify_TX/RX(release = true)
	verify_TX/RX(release = true):
				checks for last completed dsc's and updates buffer in this case
				releases all dsc's (completed, active, prepared) 
				and sets dsc_TX/RX.tail = dsc_TX/RX.last_prep = NULL




